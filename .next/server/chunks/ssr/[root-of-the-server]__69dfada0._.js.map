{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-recommendations.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview An AI agent for generating patient health recommendations.\n *\n * - generateRecommendations - A function that generates lifestyle and dietary advice.\n * - GenerateRecommendationsInput - The input type for the function.\n * - GenerateRecommendationsOutput - The return type for the function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateRecommendationsInputSchema = z.object({\n  medicalHistory: z\n    .string()\n    .describe('A summary of the patient\\'s past and present medical conditions and treatments.'),\n  currentCondition: z.string().describe('The patient\\'s current condition or reason for the latest visit.'),\n});\nexport type GenerateRecommendationsInput = z.infer<typeof GenerateRecommendationsInputSchema>;\n\nconst RecommendationSchema = z.object({\n    id: z.string().describe(\"A unique identifier for the suggestion, e.g., 'diet-1'.\"),\n    suggestion: z.string().describe('The specific, actionable recommendation for the patient.'),\n    category: z.enum(['Diet', 'Lifestyle', 'General Health']).describe('The category of the recommendation.'),\n});\n\nconst GenerateRecommendationsOutputSchema = z.object({\n  recommendations: z.array(RecommendationSchema).describe('A list of health and lifestyle recommendations for the patient.'),\n});\nexport type GenerateRecommendationsOutput = z.infer<typeof GenerateRecommendationsOutputSchema>;\n\nexport async function generateRecommendations(input: GenerateRecommendationsInput): Promise<GenerateRecommendationsOutput> {\n  return generateRecommendationsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateRecommendationsPrompt',\n  input: {schema: GenerateRecommendationsInputSchema},\n  output: {schema: GenerateRecommendationsOutputSchema},\n  prompt: `You are an expert AI medical assistant providing decision support to a doctor.\nYour task is to analyze the patient's data and generate a short list of 2-3 concise, actionable health recommendations.\n\nThe recommendations should be easy for a patient to understand and follow.\nCategorize each recommendation as 'Diet', 'Lifestyle', or 'General Health'.\n\nPatient's Current Condition:\n{{currentCondition}}\n\nPatient's Medical History:\n{{{medicalHistory}}}\n\nBased on this information, provide clear, safe, and relevant recommendations. For example, if a patient has hypertension, suggest reducing sodium intake. If they are pre-diabetic, suggest regular exercise.\n\nIMPORTANT: If the provided history is minimal or lacks specific details, provide general wellness recommendations that are safe and suitable for any patient (e.g., maintain a balanced diet, stay hydrated, engage in regular physical activity).\n`,\n});\n\nconst generateRecommendationsFlow = ai.defineFlow(\n  {\n    name: 'generateRecommendationsFlow',\n    inputSchema: GenerateRecommendationsInputSchema,\n    outputSchema: GenerateRecommendationsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,gBAAgB,uIAAA,CAAA,IAAC,CACd,MAAM,GACN,QAAQ,CAAC;IACZ,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACxC;AAGA,MAAM,uBAAuB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,IAAI,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxB,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,UAAU,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;QAAa;KAAiB,EAAE,QAAQ,CAAC;AACvE;AAEA,MAAM,sCAAsC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnD,iBAAiB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,sBAAsB,QAAQ,CAAC;AAC1D;AAGO,eAAe,wBAAwB,KAAmC;IAC/E,OAAO,4BAA4B;AACrC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAkC;IAClD,QAAQ;QAAC,QAAQ;IAAmC;IACpD,QAAQ,CAAC;;;;;;;;;;;;;;;AAeX,CAAC;AACD;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC/C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-medical-note.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview An AI agent for expanding brief medical notes into detailed entries.\n *\n * - generateMedicalNote - Expands a doctor's brief notes into a full medical record entry.\n * - GenerateMedicalNoteInput - The input type for the function.\n * - GenerateMedicalNoteOutput - The return type for the function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateMedicalNoteInputSchema = z.object({\n  briefNote: z\n    .string()\n    .describe('A brief, shorthand note from a doctor about a patient visit.'),\n});\nexport type GenerateMedicalNoteInput = z.infer<typeof GenerateMedicalNoteInputSchema>;\n\n\nconst GenerateMedicalNoteOutputSchema = z.object({\n  detailedNote: z.string().describe('A detailed, well-structured medical note suitable for patient records.'),\n});\nexport type GenerateMedicalNoteOutput = z.infer<typeof GenerateMedicalNoteOutputSchema>;\n\nexport async function generateMedicalNote(input: GenerateMedicalNoteInput): Promise<GenerateMedicalNoteOutput> {\n  return generateMedicalNoteFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateMedicalNotePrompt',\n  input: {schema: GenerateMedicalNoteInputSchema},\n  output: {schema: GenerateMedicalNoteOutputSchema},\n  prompt: `You are an expert AI medical scribe. Your task is to take a doctor's brief, shorthand notes and expand them into a formal, detailed clinical note for a patient's medical record.\n\nThe expanded note should be clear, professional, and well-structured. Use appropriate medical terminology but ensure the note is understandable.\n\nDoctor's Brief Note:\n\"{{briefNote}}\"\n\nBased on this, generate a comprehensive note covering the patient's subjective complaints, objective findings, assessment, and plan (SOAP format if applicable, but not strictly required).\n`,\n});\n\nconst generateMedicalNoteFlow = ai.defineFlow(\n  {\n    name: 'generateMedicalNoteFlow',\n    inputSchema: GenerateMedicalNoteInputSchema,\n    outputSchema: GenerateMedicalNoteOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,WAAW,uIAAA,CAAA,IAAC,CACT,MAAM,GACN,QAAQ,CAAC;AACd;AAIA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAGO,eAAe,oBAAoB,KAA+B;IACvE,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,QAAQ,CAAC;;;;;;;;AAQX,CAAC;AACD;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA5BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/doctor/patients/%5Bid%5D/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateRecommendations as '40039d80c2b68c80fb9d08d2f1ca3fade892e5df9b'} from 'ACTIONS_MODULE0'\nexport {generateMedicalNote as '409ee7d73026a46bb7586a4d2606aff277b14d150a'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 439, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/doctor/patients/%5Bid%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/doctor/patients/[id]/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/doctor/patients/[id]/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyS,GACtU,uEACA","debugId":null}},
    {"offset": {"line": 453, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/doctor/patients/%5Bid%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/doctor/patients/[id]/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/doctor/patients/[id]/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqR,GAClT,mDACA","debugId":null}},
    {"offset": {"line": 467, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}