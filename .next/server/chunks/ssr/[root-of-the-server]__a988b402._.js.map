{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/identify-patient.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A patient identification AI agent.\n *\n * - identifyPatient - A function that handles patient identification from a photo.\n * - IdentifyPatientInput - The input type for the identifyPatient function.\n * - IdentifyPatientOutput - The return type for the identifyPatient function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst PatientRecordSchema = z.object({\n    id: z.string().describe(\"The patient's unique ID.\"),\n    name: z.string().describe(\"The patient's full name.\"),\n    avatarUrl: z.string().describe(\"A URL to the patient's photo for comparison.\")\n});\n\nconst IdentifyPatientInputSchema = z.object({\n  photoDataUri: z\n    .string()\n    .describe(\n      \"A photo of a person's face, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n  patientDatabase: z.array(PatientRecordSchema).describe(\"A list of existing patient records to compare against.\"),\n});\nexport type IdentifyPatientInput = z.infer<typeof IdentifyPatientInputSchema>;\n\nconst IdentifyPatientOutputSchema = z.object({\n  matchFound: z.boolean().describe('Whether a matching patient was found in the database.'),\n  patientId: z.string().optional().describe('The ID of the matched patient, if any.'),\n});\nexport type IdentifyPatientOutput = z.infer<typeof IdentifyPatientOutputSchema>;\n\nexport async function identifyPatient(input: IdentifyPatientInput): Promise<IdentifyPatientOutput> {\n  return identifyPatientFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'identifyPatientPrompt',\n  input: {schema: IdentifyPatientInputSchema},\n  output: {schema: IdentifyPatientOutputSchema},\n  prompt: `You are an AI-powered facial recognition system for a hospital. Your task is to compare a new photo of a person's face with a database of existing patient photos to find a match.\n\nAnalyze the face in the provided photo:\nPhoto to identify: {{media url=photoDataUri}}\n\nNow, compare it against the following patient records. Each record has an ID, name, and a URL to their existing photo for a visual comparison.\n\n{{#each patientDatabase}}\nPatient ID: {{this.id}}\nPatient Name: {{this.name}}\nExisting Photo: {{media url=this.avatarUrl}}\n---\n{{/each}}\n\nBased on a visual facial comparison, determine if the face in the \"Photo to identify\" matches any of the faces in the patient database.\n\n- If you find a clear match, set 'matchFound' to true and provide the 'patientId' of the matching record.\n- If there is no clear match, set 'matchFound' to false and omit the 'patientId'.\n- Prioritize accuracy. It is better to return no match than an incorrect one.\n`,\n});\n\nconst identifyPatientFlow = ai.defineFlow(\n  {\n    name: 'identifyPatientFlow',\n    inputSchema: IdentifyPatientInputSchema,\n    outputSchema: IdentifyPatientOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n\n    \n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,sBAAsB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjC,IAAI,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxB,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAEA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;IAEJ,iBAAiB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,qBAAqB,QAAQ,CAAC;AACzD;AAGA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,YAAY,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;IACjC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC5C;AAGO,eAAe,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA0B;IAC1C,QAAQ;QAAC,QAAQ;IAA2B;IAC5C,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;AAmBX,CAAC;AACD;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAvCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/admin/identification/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {identifyPatient as '402eee073a91c719552bca99a90aa65f53a8356e7b'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 369, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/identification/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/identification/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/identification/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyS,GACtU,uEACA","debugId":null}},
    {"offset": {"line": 383, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/identification/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/identification/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/identification/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqR,GAClT,mDACA","debugId":null}},
    {"offset": {"line": 397, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}